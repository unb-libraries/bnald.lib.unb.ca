<?php

/**
 * @file
 * Contains einbaum.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_theme().
 */
function einbaum_theme($existing, $type, $theme, $path) {
  return [
    'menu_local_action' => [
      'render element' => 'elements',
      'preprocess functions' => [
        'einbaum_template_preprocess_menu_local_action',
      ]
    ],
    'menu_local_task' => [
      'render element' => 'elements',
      'preprocess functions' => [
        'einbaum_template_preprocess_menu_local_task',
      ]
    ],
    'page_title' => [
      'render element' => 'elements',
    ],
    'status_messages' => [
      'render element' => 'elements',
    ],
    'views_exposed_form' => [
      'render element' => 'elements',
      'preprocess functions' => [
        'template_preprocess_views_exposed_form',
        'einbaum_template_preprocess_views_exposed_form',
      ]
    ],
    'views_view_table' => [
      'render element' => 'elements',
      'preprocess functions' => [
        'template_preprocess_views_view_table',
        'einbaum_template_preprocess_views_view_table',
      ]
    ]
  ];
}

/**
 * Preprocess "views-view-table" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function einbaum_template_preprocess_views_exposed_form(array &$variables) {
  foreach ($variables['form'] as $key => $value) {
    if (substr($key, 0, 1) !== '#' && array_key_exists('#type', $value) && !in_array($value['#type'], ['hidden', 'actions'])) {
      $variables['form'][$key]['#attributes']['data-test'] = "form-element-$key";
    }
  }
}

/**
 * Preprocess "views-view-table" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function einbaum_template_preprocess_views_view_table(array &$variables) {
  foreach ($variables['rows'] as $rid => $row) {
    /** @var \Drupal\Core\Template\Attribute $row_attribute */
    $row_attribute = $row['attributes'];
    $row_attribute->setAttribute('data-test', "view-item-$rid");

    foreach ($row['columns'] as $cid => $column) {
      /** @var \Drupal\Core\Template\Attribute $column_attribute */
      $column_attribute = $column['attributes'];
      $column_attribute->setAttribute('data-test', "view-item-$rid-$cid");
    }
  }
}

/**
 * Preprocess "menu-local-action" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function einbaum_template_preprocess_menu_local_action(array &$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['element']['#link']['url'];
  $route_name = $url->getRouteName();
  $variables['element']['#attributes']['data-test'] = 'local-action-' .
    preg_replace('/[^a-zA-Z0-9\']/', '-', $route_name);
}

/**
 * Preprocess "menu-local-task" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function einbaum_template_preprocess_menu_local_task(array &$variables) {
  $title = strtolower($variables['element']['#link']['title']);
  $variables['element']['#attributes']['data-test'] = "local-task-$title";
}

/**
 * Preprocess "page-title" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function template_preprocess_page_title(array &$variables) {
  $variables['title_attributes']['data-test'] = 'page-title';
}

/**
 * Preprocess "status-messages" elements.
 *
 * @param array $variables
 *   An array of template variables.
 */
function template_preprocess_status_messages(array &$variables) {
  $test_id = implode('-', array_keys($variables['message_list']));
  $variables['attributes']['data-test'] = $test_id;
}

/**
 * Implements hook_form_alter().
 */
function einbaum_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  if (array_key_exists('actions', $form) && array_key_exists('submit', $form['actions'])) {
    $form['actions']['submit']['#attributes']['data-test'] = 'submit';
  }
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function einbaum_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $context['items'];

  /** @var \Drupal\Core\Field\WidgetInterface $widget */
  $widget = $context['widget'];

  $field_storage_definition = $items
    ->getFieldDefinition()
    ->getFieldStorageDefinition();

  $main_property = $field_storage_definition->getMainPropertyName();
  $properties = $field_storage_definition->getPropertyNames();
  $test_id = $items
    ->getFieldDefinition()
    ->getName();

  foreach ($properties as $property) {
    switch ($widget->getPluginId()) {
      case 'entity_reference_autocomplete_tags':
        $key = ['widget', $property];
        break;
      case 'file_generic':
        $key = FALSE;
        break;
      default:
        $key = ['widget', 0, $property];
        if (array_key_exists('delta', $context)) {
          array_splice($key, 1, 1, $context['delta']);
        }
    }

    if ($key) {
      array_push($key, '#attributes', 'data-test');
      NestedArray::setValue($field_widget_complete_form, $key, $property === $main_property
        ? $test_id
        : "{$test_id}__{$property}"
      );
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function einbaum_element_info_alter(array &$info) {
  $info['managed_file']['#process'][] = 'einbaum_managed_file_process';
}

/**
 * Additional #process callback for "managed_file" form elements.
 *
 * @param array $element
 *   The element's render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $complete_form
 *   The render array of the form the element is part of.
 *
 * @return array
 *   A modified element render array.
 */
function einbaum_managed_file_process(array &$element, FormStateInterface $form_state, array &$complete_form) {
  $element['upload']['#attributes']['data-test'] = $element['#field_name'];
  return $element;
}
